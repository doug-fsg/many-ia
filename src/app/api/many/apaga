import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/services/database';
import jwt from 'jsonwebtoken';

console.log('Rota /api/many/auth carregada');

export async function GET(req: NextRequest) {
  console.log('Subrota /api/many/auth chamada');

  const { searchParams } = new URL(req.url);
  const token = searchParams.get('token');
  const email = searchParams.get('email');

  console.log('Parâmetros recebidos:', { token, email });

  if (!token || !email) {
    console.error('Erro: Token ou email não fornecido');
    return NextResponse.json(
      { error: 'Token ou email não fornecido' },
      { status: 400 }
    );
  }

  console.log('Validando token...');
  const isValidToken = await validateChatwootToken(token, email);

  if (!isValidToken) {
    console.error('Erro: Token inválido');
    return NextResponse.json(
      { error: 'Token inválido' },
      { status: 401 }
    );
  }

  console.log('Buscando ou criando usuário...');
  let user = await prisma.user.findUnique({ where: { email } });

  if (!user) {
    user = await prisma.user.create({
      data: { email, name: 'Usuário Padrão' },
    });
  }

  if (!process.env.JWT_SECRET) {
    console.error('Erro: JWT_SECRET não está definido');
    return NextResponse.json(
      { error: 'Configuração do servidor ausente: JWT_SECRET' },
      { status: 500 }
    );
  }

  const sessionToken = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, {
    expiresIn: '1h',
  });

  console.log('Token de sessão gerado:', sessionToken);

  const response = NextResponse.json({
    message: 'Autenticação concluída',
    sessionToken,
  });

  return response;
}

async function validateChatwootToken(token: string, email: string): Promise<boolean> {
  console.log('Validando token:', { token, email });
  return true;
}
