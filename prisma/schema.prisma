generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String        @id @default(cuid())
  name                     String?
  email                    String?       @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  isIntegrationUser        Boolean       @default(false)
  stripeCustomerId         String?
  stripePriceId            String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  manytalksAccountId       String?
  aiConfigs                AIConfig[]
  accounts                 Account[]
  inboxes                  Inbox[]
  interactions             Interaction[]
  sessions                 Session[]
  whatsAppConnections      WhatsAppConnection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inbox {
  id        String    @id @default(cuid())
  name      String
  inboxId   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  doneAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model AIConfig {
  id                     String        @id @default(cuid())
  userId                 String
  isActive               Boolean       @default(true)
  nomeAtendenteDigital   String
  enviarParaAtendente    Boolean       @default(true)
  quemEhAtendente        String
  oQueAtendenteFaz       String
  objetivoAtendente      String
  comoAtendenteDeve      String
  horarioAtendimento     String
  tempoRetornoAtendimento String?
  condicoesAtendimento   String?
  embedding              Json
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  informacoesEmpresa     String
  user                   User          @relation(fields: [userId], references: [id])
  attachments            Attachment[]
  temasEvitar            TemasEvitar[]
  inboxId                Int?
  inboxName              String?
  whatsAppConnections    WhatsAppConnection[]

  @@index([userId])
}

model Attachment {
  id          String   @id @default(cuid())
  type        String
  content     String
  description String
  aiConfigId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aiConfig    AIConfig @relation(fields: [aiConfigId], references: [id], onDelete: Cascade)

  @@index([aiConfigId])
}

model TemasEvitar {
  id         String   @id @default(cuid())
  tema       String
  aiConfigId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  aiConfig   AIConfig @relation(fields: [aiConfigId], references: [id], onDelete: Cascade)

  @@index([aiConfigId])
}

model Interaction {
  id                 String    @id @default(cuid())
  name               String?
  phoneNumber        String?
  interactionsCount  Int?
  currentlyTalkingTo String?
  lastMessage        String?
  lastContactAt      DateTime?
  status             String?
  interesse          String?
  value              Decimal?  @db.Decimal(10, 2) // 10 d√≠gitos, 2 decimais para centavos
  ConversationID     Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
}

model WhatsAppConnection {
  id                String   @id @default(cuid())
  token             String   @unique
  phoneNumber       String?
  name              String?
  isActive          Boolean  @default(true)
  webhookConfigured Boolean  @default(false)
  qrCodeUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  iaId              String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiConfig          AIConfig? @relation(fields: [iaId], references: [id])

  @@index([userId])
  @@index([iaId])
}
