generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String?                    @unique
  emailVerified             DateTime?
  image                     String?
  stripeCustomerId          String?
  stripePriceId             String?
  stripeSubscriptionId      String?
  stripeSubscriptionStatus  String?
  manytalksAccountId        String?
  isIntegrationUser         Boolean                    @default(false)
  password                  String?
  canCreateTemplates        Boolean                    @default(false)
  customCreditLimit         Int?
  isSuperAdmin              Boolean                    @default(false)
  aiConfigs                 AIConfig[]
  accounts                  Account[]
  affiliate                 Affiliate?

  inboxes                   Inbox[]
  interactions              Interaction[]
  referralsReceived         Referral[]                 @relation("ReferredUser")
  sessions                  Session[]
  templates                 Template[]
  sharedTemplates           TemplateSharing[]
  whatsAppConnections       WhatsAppConnection[]

  @@index([customCreditLimit])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inbox {
  id        String    @id @default(cuid())
  name      String
  inboxId   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  doneAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model AIConfig {
  id                      String               @id @default(cuid())
  userId                  String
  isActive                Boolean              @default(true)
  nomeAtendenteDigital    String
  enviarParaAtendente     Boolean              @default(true)
  quemEhAtendente         String
  oQueAtendenteFaz        String
  objetivoAtendente       String
  comoAtendenteDeve       String
  horarioAtendimento      String
  condicoesAtendimento    String?
  informacoesEmpresa      String
  tempoRetornoAtendimento String?
  createdAt               DateTime             @default(now())
  embedding               Json
  inboxId                 Int?
  inboxName               String?
  updatedAt               DateTime             @updatedAt
  user                    User                 @relation(fields: [userId], references: [id])
  attachments             Attachment[]
  temasEvitar             TemasEvitar[]
  whatsappConnections     WhatsAppConnection[]

  @@index([userId])
}

model Attachment {
  id          String   @id @default(cuid())
  type        String
  content     String
  description String
  aiConfigId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aiConfig    AIConfig @relation(fields: [aiConfigId], references: [id], onDelete: Cascade)

  @@index([aiConfigId])
}

model TemasEvitar {
  id         String   @id @default(cuid())
  tema       String
  aiConfigId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  aiConfig   AIConfig @relation(fields: [aiConfigId], references: [id], onDelete: Cascade)

  @@index([aiConfigId])
}

model Interaction {
  id                 String    @id @default(cuid())
  name               String?
  phoneNumber        String?
  interactionsCount  Int?
  currentlyTalkingTo String?
  lastMessage        String?
  lastContactAt      DateTime?
  status             String?
  userId             String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  interesse          String?
  value              Decimal?  @db.Decimal(10, 2)
  ConversationID     Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model WhatsAppConnection {
  id                String    @id @default(cuid())
  token             String    @unique
  phoneNumber       String?
  name              String?
  isActive          Boolean   @default(true)
  webhookConfigured Boolean   @default(false)
  qrCodeUrl         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  iaId              String?
  aiConfig          AIConfig? @relation(fields: [iaId], references: [id])
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([iaId])
}

model Template {
  id                      String            @id @default(cuid())
  name                    String            @unique
  nomeAtendenteDigital    String
  quemEhAtendente         String
  oQueAtendenteFaz        String
  objetivoAtendente       String
  comoAtendenteDeve       String
  horarioAtendimento      String
  tempoRetornoAtendimento String?
  condicoesAtendimento    String?
  informacoesEmpresa      String
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  userId                  String
  isPublic                Boolean           @default(true)
  isPublished             Boolean           @default(false)
  user                    User              @relation(fields: [userId], references: [id])
  sharedWith              TemplateSharing[]

  @@index([userId])
}

model TemplateSharing {
  id         String   @id @default(cuid())
  templateId String
  userId     String
  createdAt  DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@index([userId])
  @@index([templateId])
}

model Affiliate {
  id                     String     @id @default(cuid())
  userId                 String     @unique
  stripeConnectAccountId String?
  referralCode           String     @unique @default(cuid())
  status                 String     @default("pending")
  commissionRate         Int        @default(50)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  referrals              Referral[] @relation("AffiliateReferrals")

  @@index([userId])
  @@index([referralCode])
}

model Referral {
  id             String    @id @default(cuid())
  affiliateId    String
  referredUserId String
  status         String    @default("pending")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  affiliate      Affiliate @relation("AffiliateReferrals", fields: [affiliateId], references: [id])
  referredUser   User      @relation("ReferredUser", fields: [referredUserId], references: [id])

  @@unique([affiliateId, referredUserId])
  @@index([affiliateId])
  @@index([referredUserId])
}


